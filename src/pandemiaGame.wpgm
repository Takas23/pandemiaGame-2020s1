import wollok.game.*
import simulacion.*
import agente.*


object pandemiaGameConfig {
	method height() = 4
	method width() = 6
	method title() = "Simulacion - noCompila"
	
	method configureGame() {
		self.configureGameParameters()
		self.agregarManzanas()
		self.configureTeclas()
		game.addVisual(agente)

	}
		
	method configureGameParameters() {
		game.height(self.height())
		game.width(self.width())
		game.title(self.title())
	}
	
	method agregarManzanas() {
		(1..game.width()).forEach({x => 
			(1..game.height()).forEach({y => 
				const nuevaManzana = simulacion.crearManzana()
				nuevaManzana.position(game.at(x-1,y-1))
				simulacion.agregarManzana(nuevaManzana)
				game.addVisual(nuevaManzana)
			})
		})
	}


 	method configureTeclas() {
 		const dia = "Dia: " + simulacion.diaActual()
 		const pers = " Personas: " + simulacion.totalPersonas()
		const inf = " Infectados: " + simulacion.totalInfectados()
//		const sint = " Sintomaticos: " + simulacion.totalSintomaticos()		
 		
		keyboard.m().onPressDo({game.say(agente, dia+pers+inf)})
			//mensaje estado de la simulacion
		keyboard.n().onPressDo({simulacion.nuevoInfectado()})
			//genera una nueva persona infectada en una manzana al azar
		keyboard.b().onPressDo({
			simulacion.pasaUnDia()
			console.println("terminó el día")
		})
			//pasa un dia en la simulacion(movimiento, contagio, curacion)
		keyboard.right().onPressDo({agente.moveEste()})
		keyboard.left().onPressDo({agente.moveOeste()})
		keyboard.up().onPressDo({agente.moveNorte()})
		keyboard.down().onPressDo({agente.moveSur()})
		keyboard.z().onPressDo({agente.aislarInfectados()})
		keyboard.x().onPressDo({agente.cuarentenarManzana()})
	}
	
}

program pandemiaGame {
	pandemiaGameConfig.configureGame()
	game.start()
}
